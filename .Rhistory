legend("topleft",paste(lag_num,"lags","polynomial",sep = " "),cex = 2)
autoSVMR(lag_num,"polynomial",insampletest = FALSE)
autoSVMR(lag_num,"polynomial",insampletest = TRUE)
legend("topleft",paste(lag_num,"lags","polynomial",sep = " "),cex = 2)
edit(rollSVMR())
edit("rollSVMR")
trace(rollSVMR,edit = T)
rollSVMR
rollSVMR<-function(lag_num,kernel,roll_num,insampletest=TRUE){
if(insampletest) autoSVMR(lag_num,kernel,insampletest=TRUE)
else {
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD.test<-lagx("DD",lag_num,insample=FALSE)
lagDD.all <- rbind(lagDD,lagDD.test)
lagDD.all<-.xts(x = lagDD.all,index = as.Date(rownames(lagDD.all),format="%Y-%m-%d"))
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lagDD.test<-.xts(x = lagDD.test,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
new<-c()
for (i in 1:length(index(lagDD.test))) {
trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
#trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.test[i,-1])
new<-c(new,p)
}
#return(new)
new <-.xts(new,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
lim<-c(min(c(as.vector(new),as.vector(lagDD.test[,1]))),max(c(as.vector(new),as.vector(lagDD.test[,1]))))
plot(lagDD.test[,1],main="DD and out_sample estimate",type ="l",ylim=lim)
lines(new,type = "b")
sprintf("the squared error is %f",sum((new-lagDD.test[,1])^2))
}
}
rollSVMR(5,"radial",insampletest = FALSE,roll_num = 7)
rollSVMR(5,"polynomial",insampletest = FALSE,roll_num = 7)
rollSVMR(5,"radial",insampletest = FALSE,roll_num = 7)
rollSVMR(5,"polynomial",insampletest = FALSE,roll_num = 7)
rollSVMR<-function(lag_num,kernel,roll_num,insampletest=TRUE){
if(insampletest) autoSVMR(lag_num,kernel,insampletest=TRUE)
else {
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD.test<-lagx("DD",lag_num,insample=FALSE)
lagDD.all <- rbind(lagDD,lagDD.test)
lagDD.all<-.xts(x = lagDD.all,index = as.Date(rownames(lagDD.all),format="%Y-%m-%d"))
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lagDD.test<-.xts(x = lagDD.test,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
new<-c()
for (i in 1:length(index(lagDD.test))) {
trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
#trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.test[i,-1])
new<-c(new,p)
}
#return(new)
new <-.xts(new,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
lim<-c(min(c(as.vector(new),as.vector(lagDD.test[,1]))),max(c(as.vector(new),as.vector(lagDD.test[,1]))))
plot(lagDD.test[,1],main="DD and out_sample estimate",type ="l",ylim=lim)
lines(new,type = "b")
sprintf("the squared error is %f",sum((new-lagDD.test[,1])^2))
}
}
rollSVMR(5,"radial",insampletest = FALSE,roll_num = 7)
rollSVMR(5,"polynomial",insampletest = FALSE,roll_num = 7)
legend("topleft",paste(lag_num,"lags","polynomial",sep = " "),cex = 2)
autoSVMR(lag_num,"polynomial",insampletest = TRUE)
rollSVMR<-function(lag_num,kernel,roll_num,insampletest=TRUE){
if(insampletest) autoSVMR(lag_num,kernel,insampletest=TRUE)
else {
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD.test<-lagx("DD",lag_num,insample=FALSE)
lagDD.all <- rbind(lagDD,lagDD.test)
lagDD.all<-.xts(x = lagDD.all,index = as.Date(rownames(lagDD.all),format="%Y-%m-%d"))
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lagDD.test<-.xts(x = lagDD.test,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
new<-c()
for (i in 1:length(index(lagDD.test))) {
trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
#trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.test[i,-1])
new<-c(new,p)
}
#return(new)
new <-.xts(new,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
lim<-c(min(c(as.vector(new),as.vector(lagDD.test[,1]))),max(c(as.vector(new),as.vector(lagDD.test[,1]))))
plot(lagDD.test[,1],main="DD and out_sample estimate",type ="l",ylim=lim)
lines(new,type = "b")
sprintf("the squared error is %f",sum((new-lagDD.test[,1])^2))
}
return(new)
}
rollSVMR(5,"radial",insampletest = FALSE,roll_num = 7)
rollSVMR(5,"polynomial",insampletest = FALSE,roll_num = 7)
autoSVMR<-function(lag_num,kernel,insampletest=TRUE){
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
m<-svm(DD~.,data =lagDD ,type="eps-regression"
,kernel=kernel,scale=FALSE)
if(insampletest){
new <- predict(m, lagDD[,-1])
new <-.xts(new,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
plot(lagDD[,1],ylim=c(45,60),main="DD and in_sample estimate")
lines(new,type = "b")
sprintf("the squared error is %f",sum((new-lagDD[,1])^2))
}else{
lagDD<-lagx("DD",lag_num,insample=FALSE)
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
new <- predict(m,lagDD[,-1])
new <-.xts(new,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lim<-c(min(c(as.vector(new),as.vector(lagDD[,1]))),max(c(as.vector(new),as.vector(lagDD[,1]))))
plot(lagDD[,1],main="DD and out_sample estimate",type ="l",ylim=lim)
lines(new,type = "b")
sprintf("the squared error is %f",sum((new-lagDD[,1])^2))
}
return(new)
}
### lag5 + RBK
lag_num=5
autoSVMR(lag_num,"radial",insampletest = TRUE)
autoSVMR(lag_num,"radial",insampletest = FALSE)
rollSVMR(5,"radial",insampletest = FALSE,roll_num = 7)
autoSVMR(lag_num,"polynomial",insampletest = FALSE)
rollSVMR(5,"polynomial",insampletest = FALSE,roll_num = 7)
?svm
rollSVMR(5,"polynomial",insampletest = FALSE,roll_num = 7)
lag_num=5;kernel="polynomial";roll_num=7;insampletest = FALSE
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD.test<-lagx("DD",lag_num,insample=FALSE)
lagDD.all <- rbind(lagDD,lagDD.test)
lagDD.all<-.xts(x = lagDD.all,index = as.Date(rownames(lagDD.all),format="%Y-%m-%d"))
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lagDD.test<-.xts(x = lagDD.test,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
new<-c()
i=length(index(lagDD.test))
trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
#trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.test[i,-1])
p
i=length(index(lagDD.test))-1
trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
#trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.test[i,-1])
p
new
rollSVMR(5,"polynomial",insampletest = FALSE,roll_num = 7)
i=length(index(lagDD.test))-2
trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
#trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.test[i,-1])
i=length(index(lagDD.test))-2
trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
#trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
(p<-predict(m,lagDD.test[i,-1]))
trainnow
i=length(index(lagDD.test))-1
trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
trainnow
i=length(index(lagDD.test))-1
trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
trainnow[1,]
i=length(index(lagDD.test))-2
trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
trainnow[1,]
tail(trainnow,1)
i=length(index(lagDD.test))-2
trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
tail(trainnow,1)
i=length(index(lagDD.test))-1
trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
tail(trainnow,1)
rollSVMR<-function(lag_num,kernel,roll_num,insampletest=TRUE){
if(insampletest) autoSVMR(lag_num,kernel,insampletest=TRUE)
else {
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD.test<-lagx("DD",lag_num,insample=FALSE)
lagDD.all <- rbind(lagDD,lagDD.test)
lagDD.all<-.xts(x = lagDD.all,index = as.Date(rownames(lagDD.all),format="%Y-%m-%d"))
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lagDD.test<-.xts(x = lagDD.test,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
new<-c()
for (i in 1:length(index(lagDD.test))) {
#trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.test[i,-1])
new<-c(new,p)
}
#return(new)
new <-.xts(new,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
lim<-c(min(c(as.vector(new),as.vector(lagDD.test[,1]))),max(c(as.vector(new),as.vector(lagDD.test[,1]))))
plot(lagDD.test[,1],main="DD and out_sample estimate",type ="l",ylim=lim)
lines(new,type = "b")
sprintf("the squared error is %f",sum((new-lagDD.test[,1])^2))
}
return(new)
}
rollSVMR(5,"polynomial",insampletest = FALSE,roll_num = 7)
rollSVMR(5,"radial",insampletest = FALSE,roll_num = 7)
?svm
rollSVMR(5,"radial",insampletest = FALSE,roll_num = 7)
rollSVMR<-function(lag_num,kernel,roll_num,insampletest=TRUE){
if(insampletest) autoSVMR(lag_num,kernel,insampletest=TRUE)
else {
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD.test<-lagx("DD",lag_num,insample=FALSE)
lagDD.all <- rbind(lagDD,lagDD.test)
lagDD.all<-.xts(x = lagDD.all,index = as.Date(rownames(lagDD.all),format="%Y-%m-%d"))
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lagDD.test<-.xts(x = lagDD.test,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
new<-c()
for (i in 1:length(index(lagDD.test))) {
#trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.test[i,-1])
new<-c(new,p)
}
#return(new)
new <-.xts(new,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
lim<-c(min(c(as.vector(new),as.vector(lagDD.test[,1]))),max(c(as.vector(new),as.vector(lagDD.test[,1]))))
plot(lagDD.test[,1],main="DD and out_sample estimate",type ="l",ylim=lim)
lines(new,type = "b")
print(paste("the squared error is",sum((new-lagDD.test[,1])^2)),sep="")
}
return(new)
}
rollSVMR(5,"radial",insampletest = FALSE,roll_num = 7)
rollSVMR(5,"polynomial",insampletest = FALSE,roll_num = 7)
rollSVMR<-function(lag_num,kernel,roll_num,insampletest=TRUE){
if(insampletest) autoSVMR(lag_num,kernel,insampletest=TRUE)
else {
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD.test<-lagx("DD",lag_num,insample=FALSE)
lagDD.all <- rbind(lagDD,lagDD.test)
lagDD.all<-.xts(x = lagDD.all,index = as.Date(rownames(lagDD.all),format="%Y-%m-%d"))
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lagDD.test<-.xts(x = lagDD.test,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
new<-c()
for (i in 1:length(index(lagDD.test))) {
trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
#trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.test[i,-1])
new<-c(new,p)
}
#return(new)
new <-.xts(new,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
lim<-c(min(c(as.vector(new),as.vector(lagDD.test[,1]))),max(c(as.vector(new),as.vector(lagDD.test[,1]))))
plot(lagDD.test[,1],main="DD and out_sample estimate",type ="l",ylim=lim)
lines(new,type = "b")
print(paste("the squared error is",sum((new-lagDD.test[,1])^2)),sep="")
}
return(new)
}
rollSVMR(5,"radial",insampletest = FALSE,roll_num = 7)
rollSVMR(5,"polynomial",insampletest = FALSE,roll_num = 7)
lagDD.test[,1]
rollSVMR<-function(lag_num,kernel,roll_num,insampletest=TRUE){
if(insampletest) autoSVMR(lag_num,kernel,insampletest=TRUE)
else {
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD.test<-lagx("DD",lag_num,insample=FALSE)
lagDD.all <- rbind(lagDD,lagDD.test)
lagDD.all<-.xts(x = lagDD.all,index = as.Date(rownames(lagDD.all),format="%Y-%m-%d"))
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lagDD.test<-.xts(x = lagDD.test,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
new<-c()
for (i in 1:length(index(lagDD.test))) {
#trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.test[i,-1])
new<-c(new,p)
}
#return(new)
new <-.xts(new,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
lim<-c(min(c(as.vector(new),as.vector(lagDD.test[,1]))),max(c(as.vector(new),as.vector(lagDD.test[,1]))))
plot(lagDD.test[,1],main="DD and out_sample estimate",type ="l",ylim=lim)
lines(new,type = "b")
print(paste("the squared error is",sum((new-lagDD.test[,1])^2)),sep="")
}
return(new)
}
rollSVMR(5,"radial",insampletest = FALSE,roll_num = 7)
rollSVMR(5,"polynomial",insampletest = FALSE,roll_num = 7)
autoSVMR(lag_num,"polynomial",insampletest = FALSE)
rollSVMR<-function(lag_num,kernel,roll_num,insampletest=TRUE){
autoSVMR<-function(lag_num,kernel,insampletest=TRUE){
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
m<-svm(DD~.,data =lagDD ,type="eps-regression"
,kernel=kernel,scale=FALSE)
if(insampletest){
new <- predict(m, lagDD[,-1])
new <-.xts(new,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
plot(lagDD[,1],ylim=c(45,60),main="DD and in_sample estimate")
lines(new,type = "b")
sprintf("the squared error is %f",sum((new-lagDD[,1])^2))
}else{
lagDD<-lagx("DD",lag_num,insample=FALSE)
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
new <- predict(m,lagDD[,-1])
new <-.xts(new,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lim<-c(min(c(as.vector(new),as.vector(lagDD[,1]))),max(c(as.vector(new),as.vector(lagDD[,1]))))
plot(lagDD[,1],main="DD and out_sample estimate",type ="l",ylim=lim)
lines(new,type = "b")
print(paste("the squared error is %f",sum((new-lagDD[,1])^2),sep=""))
}
return(new)
}
lag_num=5
autoSVMR(lag_num,"radial",insampletest = FALSE)
autoSVMR(lag_num,"polynomial",insampletest = FALSE)
### rolling svm outsample estimate(windows<=7)
source('~/Box Sync/Course/479/hwk/hwk2/svm_regression.R')
source('~/Box Sync/Course/479/hwk/hwk2/svm_regression.R')
source('~/Box Sync/Course/479/hwk/hwk2/svm_regression.R')
source('~/Box Sync/Course/479/hwk/hwk2/svm_regression.R')
source('~/Box Sync/Course/479/Final_Project/clean.R')
source('~/Box Sync/Course/479/Final_Project/clean.R')
source('~/Box Sync/Course/479/Final_Project/clean.R')
a<-c("a","b")
paste(a,collapse = "")
source('~/Box Sync/Course/479/Final_Project/clean.R')
source('~/Box Sync/Course/479/Final_Project/clean.R')
source('~/Box Sync/Course/479/hwk/hwk2/svm_regression.R')
getwd
getwd()
source("clean.R")
lag_num <-5
lagCAT<-lagx("CAT",lag_num,insample = TRUE)
lagCAT
colnames(highcorr)[highcorr[which.max(rowSums(highcorr)),]]
HighCor<-colnames(highcorr)[highcorr[which.max(rowSums(highcorr)),]]
HighCor<-colnames(highcorr)[highcorr[which.max(rowSums(highcorr)),]]
lapply(HighCor, function(x) lagx(x,lag_num,insample = TRUE), lag_num=5)
lapply(HighCor, function(x) lagx(x,insample = TRUE), lag_num=5)
?lapply
lapply(HighCor, function(x,lag_num,insample) lagx(x), lag_num=5,,insample = TRUE)
lapply(HighCor, function(x,lag_num,insample) lagx(x), lag_num=5,insample = TRUE)
lapply(HighCor, function(x,lag_num,insample) {lagx(x,lag_num,insample)}
, lag_num=5,insample = TRUE)
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx(x,lag_num,insample)}
, lag_num=5,insample = TRUE)
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx(x,lag_num,insample)}
, lag_num=3,insample = TRUE)
as.data.frame(lagX)
nex?t
?next
?Next
Next(cl$CAT)
Next(cl$CAT)
cl$CAT
head(lagX)
lagX <- as.data.frame(lagX)
head(lagX)
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD
merge(lagDD,lagX)
cbind(lagDD,lagX)
length(lagDD)
lagDD
dim(lagDD)
stop("larger corlags than lag_num")
mixSVMR<-function(lag_num,kernel,insampletest=TRUE,corlags){
if(corlags <=lag_num) {
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx(x,lag_num,insample)}
, lag_num=corlags,insample = TRUE)
lagX <- as.data.frame(lagX)
}else{
stop("larger corlags than lag_num")
}
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD <- cbind(lagDD,head(lagX,dim(lagDD)[1]))##combine highly correlated stocks
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
m<-svm(DD~.,data =lagDD ,type="eps-regression"
,kernel=kernel,scale=FALSE)
## whether insampletest
if(insampletest){
new <- predict(m, lagDD[,-1])
new <-.xts(new,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
plot(lagDD[,1],ylim=c(45,60),main="DD and in_sample estimate")
lines(new,type = "b")
sprintf("the squared error is %f",sum((new-lagDD[,1])^2))
}else{
#TEST data
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx(x,lag_num,insample)}
, lag_num=corlags,insample = FALSE)
lagX <- as.data.frame(lagX)
lagDD<-lagx("DD",lag_num,insample=FALSE)
lagDD <- cbind(lagDD,head(lagX,dim(lagDD)[1]))##combine highly correlated stocks
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
new <- predict(m,lagDD[,-1])
new <-.xts(new,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lim<-c(min(c(as.vector(new),as.vector(lagDD[,1]))),max(c(as.vector(new),as.vector(lagDD[,1]))))
plot(lagDD[,1],main="DD and out_sample estimate",type ="l",ylim=lim)
lines(new,type = "b")
print(paste(kernel,"static svm outsample","the S.E is",sum((new-lagDD[,1])^2),sep=" "))
}
return(new)
}
lag_num=5
mixSVMR(lag_num,"radial",insampletest = FALSE,corlags=3)
library(e1071)
lag_num=5
mixSVMR(lag_num,"radial",insampletest = FALSE,corlags=3)
mixSVMR(lag_num,"polynomial",insampletest = FALSE,corlags=3)
source('~/Box Sync/Course/479/Final_Project/svmRegression_mixed.R')
source('~/Box Sync/Course/479/Final_Project/svmRegression_auto.R')
mixRollSVMR<-function(lag_num,kernel,roll_num,insampletest=TRUE,corlags){
if(insampletest) mixSVMR(lag_num,kernel,insampletest=TRUE,corlags)
else {
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx(x,lag_num,insample)}
, lag_num=corlags,insample = TRUE)
lagX <- as.data.frame(lagX)
lagX.test<-lapply(HighCor, function(x,lag_num,insample) {lagx(x,lag_num,insample)}
, lag_num=corlags,insample = FALSE)
lagX.test <- as.data.frame(lagX.test)
lagX.all <- rbind(lagX,lagX.test)
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD.test<-lagx("DD",lag_num,insample=FALSE)
lagDD.all <- rbind(lagDD,lagDD.test)
lagDD.all <- cbind(lagDD.all,head(lagX.all,dim(lagDD.all)[1]))##combine highly correlated stocks
lagDD.all<-.xts(x = lagDD.all,index = as.Date(rownames(lagDD.all),format="%Y-%m-%d"))
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lagDD.test<-.xts(x = lagDD.test,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
new<-c()
for (i in 1:length(index(lagDD.test))) {
#trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.test[i,-1])
new<-c(new,p)
}
#return(new)
new <-.xts(new,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
lim<-c(min(c(as.vector(new),as.vector(lagDD.test[,1]))),max(c(as.vector(new),as.vector(lagDD.test[,1]))))
plot(lagDD.test[,1],main="DD and out_sample estimate",type ="l",ylim=lim)
lines(new,type = "b")
print(paste(kernel,"rolling mixed-svm outsample","the S.E is",sum((new-lagDD.test[,1])^2)),sep="")
}
return(new)
}
mixRollSVMR(lag_num = 5,"radial",insampletest = FALSE,roll_num = 7,corlags=3)
mixSVMR(lag_num,"radial",insampletest = FALSE,corlags=3)
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx(x,lag_num,insample)}
, lag_num=corlags,insample = TRUE)
corlags=3
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx(x,lag_num,insample)}
, lag_num=corlags,insample = TRUE)
lagX <- as.data.frame(lagX)
lagX.test<-lapply(HighCor, function(x,lag_num,insample) {lagx(x,lag_num,insample)}
, lag_num=corlags,insample = FALSE)
lagX.test <- as.data.frame(lagX.test)
lagX.all <- rbind(lagX,lagX.test)
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD.test<-lagx("DD",lag_num,insample=FALSE)
lagDD.all <- rbind(lagDD,lagDD.test)
lagDD.all <- cbind(lagDD.all,head(lagX.all,dim(lagDD.all)[1]))##combine highly correlated stocks
lagDD.all<-.xts(x = lagDD.all,index = as.Date(rownames(lagDD.all),format="%Y-%m-%d"))
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lagDD.test<-.xts(x = lagDD.test,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
new<-c()
for (i in 1:length(index(lagDD.test))) {
#trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.test[i,-1])
new<-c(new,p)
}
roll_num=7
for (i in 1:length(index(lagDD.test))) {
#trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.test[i,-1])
new<-c(new,p)
}
length(index(lagDD))
for (i in 1:length(index(lagDD.test))) {
#trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
trainnow <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
p<-predict(m,lagDD.all[i+length(index(lagDD)),-1])
new<-c(new,p)
}
trainnow
i
m<-svm(DD~.,data =trainnow ,type="eps-regression"
,kernel=kernel,scale=FALSE)
m<-svm(DD~.,data =trainnow ,type="eps-regression",kernel=kernel,scale=FALSE)
trainnow
