lagX.test<-lapply(HighCor, function(x,lag_num,insample) {lagx2(x,lag_num,insample)}
, lag_num=corlags,insample = FALSE)
lagX.test <- as.data.frame(lagX.test)
lagX.all <- rbind(lagX,lagX.test)
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD.test<-lagx("DD",lag_num,insample=FALSE)
lagDD.all <- rbind(lagDD,lagDD.test)
lagDD.all <- cbind(lagDD.all,head(lagX.all,dim(lagDD.all)[1]))##combine highly correlated stocks
lagDD.all<-.xts(x = lagDD.all,index = as.Date(rownames(lagDD.all),format="%Y-%m-%d"))
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lagDD.test<-.xts(x = lagDD.test,index = as.Date(rownames(lagDD.test),format="%Y-%m-%d"))
new<-c()
for (i in 1:length(index(lagDD.test))) {
#trainnow <-  lagDD.all[1:(i+length(index(lagDD))-1),]
trainnow  <-  lagDD.all[(i+length(index(lagDD))-roll_num):(i+length(index(lagDD))-1),]
kpc <- kpca(~.,data=trainnow[,-1],kernel="rbfdot",
kpar=list(sigma=0.2),features=0)
source('~/Box Sync/Course/479/Final_Project_479/kpca+svmR.R')
source('~/Box Sync/Course/479/Final_Project_479/svmRegression_mixed.R')
source('~/Box Sync/Course/479/Final_Project_479/kpca+svmR.R')
mixRollSVMR(lag_num = 7,"radial",insampletest = FALSE,roll_num = 5,corlags=3)
mixRollSVMR(lag_num = 7,"radial",insampletest = FALSE,roll_num = 6,corlags=3)
mixRollSVMR(lag_num = 7,"radial",insampletest = FALSE,roll_num = 5,corlags=3)
mixRollSVMR(lag_num = 7,"radial",insampletest = FALSE,roll_num = 5,corlags=4)
mixRollSVMR(lag_num = 8,"polynomial",insampletest = FALSE,roll_num = 5,corlags=3)
mixRollSVMR(lag_num = 7,"polynomial",insampletest = FALSE,roll_num = 9,corlags=3)
mixRollSVMR(lag_num = 7,"polynomial",insampletest = FALSE,roll_num = 6,corlags=3)
mixRollSVMR(lag_num = 7,"polynomial",insampletest = FALSE,roll_num = 5,corlags=4)
mixRollSVMR(lag_num = 7,"polynomial",insampletest = FALSE,roll_num = 5,corlags=3)
source('~/Box Sync/Course/479/Final_Project_479/svmRegression_mixed.R')
source('~/Box Sync/Course/479/Final_Project_479/kpca+svmR.R')
source('~/Box Sync/Course/479/Final_Project_479/svmRegression_mixed.R')
source('~/Box Sync/Course/479/Final_Project_479/kpca+svmR.R')
source('~/Box Sync/Course/479/Final_Project_479/kpca+svmR.R')
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx2(x,lag_num,insample)}
, lag_num=corlags,insample = TRUE)
lagX <- as.data.frame(lagX)
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD <- cbind(lagDD,head(lagX,dim(lagDD)[1]))##combine highly correlated stocks
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
kpc <- kpca(~.,data=lagDD[,-1],kernel="polydot")
#,kpar=list(sigma=0.2),features=0)
kpc <- kpca(~.,data=lagDD[,-1],kernel="polydot")
?kpca
source('~/Box Sync/Course/479/Final_Project_479/kpca+svmR.R')
source('~/Box Sync/Course/479/Final_Project_479/kpca+svmR.R')
?svm
source("Gaussionkpca+svmR.R")
source("Gaussionkpca+svmR.R")
source("Gaussionkpca+svmR.R")
mixSVMR(lag_num,"radial",insampletest = FALSE,corlags=4)
mixSVMR(lag_num,"radial",insampletest = TRUE,corlags=4)
mixSVMR(lag_num,"polynomial",insampletest = TRUE,corlags=4)
mixSVMR(lag_num,"radial",insampletest = TRUE,corlags=4)
mixSVMR(lag_num,"polynomial",insampletest = TRUE,corlags=4)
mixSVMR(lag_num,"radial",insampletest = TRUE,corlags=4)
mixSVMR(lag_num,"polynomial",insampletest = TRUE,corlags=4)
source('~/Box Sync/Course/479/Final_Project_479/Gaussionkpca+svmR.R')
mixSVMR(lag_num,"radial",insampletest = TRUE,corlags=4)
source('~/Box Sync/Course/479/Final_Project_479/Gaussionkpca+svmR.R')
mixSVMR(lag_num,"radial",insampletest = TRUE,corlags=4)
source('~/Box Sync/Course/479/Final_Project_479/Gaussionkpca+svmR.R')
source('~/Box Sync/Course/479/Final_Project_479/Gaussionkpca+svmR.R')
source("classification_mixed.R")
mixRollSVMR(lag_num = 2,"radial",insampletest = FALSE,roll_num = 5,corlags=3)
mixRollSVMR(lag_num = 3,"radial",insampletest = FALSE,roll_num = 5,corlags=3)
mixRollSVMR(lag_num = 7,"radial",insampletest = FALSE,roll_num = 5,corlags=3)
mixRollSVMR(lag_num = 7,"radial",insampletest = FALSE,roll_num = 5,corlags=3)
source('~/Box Sync/Course/479/Final_Project_479/Gaussionkpca+svmR.R')
mixRollSVMR(lag_num = 7,"radial",insampletest = FALSE,roll_num = 5,corlags=3)
mixRollSVMR(lag_num = 6,"radial",insampletest = FALSE,roll_num = 5,corlags=3)
mixRollSVMR(lag_num = 5,"radial",insampletest = FALSE,roll_num = 5,corlags=3)
mixRollSVMR(lag_num = 4,"radial",insampletest = FALSE,roll_num = 5,corlags=3)
mixRollSVMR(lag_num = 4,"polynomial",insampletest = FALSE,roll_num = 5,corlags=3)
mixRollSVMR(lag_num = 7,"polynomial",insampletest = FALSE,roll_num = 5,corlags=3)
mixRollSVMR(lag_num = 3,"polynomial",insampletest = FALSE,roll_num = 5,corlags=3)
mixRollSVMR(lag_num = 4,"radial",insampletest = FALSE,roll_num = 5,corlags=3)
source("clean.R")
library(e1071)
library(caret)
library(pROC)#for classification
pkgs <- c('foreach', 'doParallel')
lapply(pkgs, require, character.only = T)
registerDoParallel(cores = 4)
lagDD<-lagx("DD",lag=5 ,insample = TRUE)
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
?foreach
cost <- c(10, 100)
gamma <- c(1, 2)
parms <- expand.grid(cost = cost, gamma = gamma)
parms
(parms <- expand.grid(cost = cost, gamma = gamma))
?optim
library(e1071)
?svm
source('~/Box Sync/Course/479/SVM_KPCA_479/classification_auto.R', echo=TRUE)
source('~/Box Sync/Course/479/SVM_KPCA_479/svmRegression_auto.R', echo=TRUE)
source('~/Box Sync/Course/479/SVM_KPCA_479/svmRegression_auto.R', echo=TRUE)
source('~/Box Sync/Course/479/SVM_KPCA_479/svmRegression_mixed.R', echo=TRUE)
?optim
lagDD<-lagx("DD",lag_num=5,insample = TRUE)
lagDD<-lagx("DD",lag=5,insample = TRUE)
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
m<-svm(DD~.,data =lagDD ,type="eps-regression"
,kernel=kernel,scale=FALSE, cost=cost,gamma=gamma)
m<-svm(DD~.,data =lagDD ,type="eps-regression"
,kernel=kernel,scale=FALSE)#, cost=cost,gamma=gamma)
m<-svm(DD~.,data =lagDD ,type="eps-regression"
,kernel="radial",scale=FALSE)#, cost=cost,gamma=gamma)
m
autoSVMR<-function(x){
gamma<-x[1];cost<-x[2]
lagDD<-lagx("DD",lag=5,insample = TRUE)
m<-svm(DD~.,data =lagDD ,type="eps-regression"
,kernel="radial",scale=FALSE, cost=cost,gamma=gamma)
new <- predict(m, lagDD[,-1])
sum((new-lagDD[,1])^2)/length(new)
}
optim(c(0.2,1),autoSVMR)
?optim
?optimize
?optim
optim(c(0.2,1),autoSVMR,lower = 0)
m
cost <- seq(0,5,10)
cost
cost <- seq(0,5,length=10)
cpst
cost
cost <- seq(0,5,length=12)
cost
cost <- seq(0,5,by=0.01)
cost
?svm
cost <- seq(0,5,by=0.1)
gamma <- seq(0,5,by=0.1)
(parms <- expand.grid(cost = cost, gamma = gamma))
result <- foreach(i = 1:nrow(parms), .combine = rbind) %dopar% {
c <- parms[i, ]$cost
g <- parms[i, ]$gamma
mse<-tuneSVMR(c(g,c))
data.frame(parms[i, ], MSE = mse)
}
tuneSVMR<-function(x){
gamma<-x[1];cost<-x[2]
lagDD<-lagx("DD",lag=5,insample = TRUE)
m<-svm(DD~.,data =lagDD ,type="eps-regression"
,kernel="radial",scale=FALSE, cost=cost,gamma=gamma)
new <- predict(m, lagDD[,-1])
sum((new-lagDD[,1])^2)/length(new)
}
optim(c(0.2,1),tuneSVMR,lower = 0)
cost <- seq(0,5,by=0.1)
gamma <- seq(0,5,by=0.1)
parms <- expand.grid(cost = cost, gamma = gamma)
result <- foreach(i = 1:nrow(parms), .combine = rbind) %dopar% {
c <- parms[i, ]$cost
g <- parms[i, ]$gamma
mse<-tuneSVMR(c(g,c))
data.frame(parms[i, ], MSE = mse)
}
M
m
m<-svm(DD~.,data =lagDD ,type="eps-regression"
,kernel="radial",scale=FALSE, cost=.1,gamma=.1)
m<-svm(DD~.,data =lagDD ,type="eps-regression"
,kernel="radial",scale=FALSE, cost=-1,gamma=.1)
m<-svm(DD~.,data =lagDD ,type="eps-regression"
,kernel="radial",scale=FALSE, cost=0,gamma=0)
cost <- seq(0.1,5,by=0.1)
gamma <- seq(0.1,5,by=0.1)
parms <- expand.grid(cost = cost, gamma = gamma)
result <- foreach(i = 1:nrow(parms), .combine = rbind) %dopar% {
c <- parms[i, ]$cost
g <- parms[i, ]$gamma
mse<-tuneSVMR(c(g,c))
data.frame(parms[i, ], MSE = mse)
}
head(result)
filter(result,MSE<0.02)
which.min(result$MSE)]
which.min(result$MSE)
result[which.min(result$MSE),]
arrange(result,desc(MSE))
head(arrange(result,desc(MSE)))
head(arrange(result,MSE))
cost <- seq(0.1,5,by=0.1)
gamma <- seq(0.1,5,by=0.1)
parms <- expand.grid(cost = cost, gamma = gamma)
result <- foreach(i = 1:nrow(parms), .combine = rbind) %dopar% {
c <- parms[i, ]$cost
g <- parms[i, ]$gamma
mse<-tuneSVMR(c(g,c))
data.frame(parms[i, ], MSE = mse)
}
head(arrange(result,MSE))
source('~/Box Sync/Course/479/SVM_KPCA_479/svmRegression_auto.R', echo=TRUE)
source('~/Box Sync/Course/479/SVM_KPCA_479/svmRegression_auto.R', echo=TRUE)
source("svmRegression_auto.R")
m
source("svmRegression_auto.R")
HighCor<-colnames(highcorr)[highcorr[which.max(rowSums(highcorr)),]]
lagx2 <- function(stock,lag,insample=TRUE){
x <- eval(expr = parse(text = paste("cl$",stock,sep = "")))
if(insample){
org.len<-length(x)
lagxs<-lapply(c(0,seq(lag)), function(i) lag(x,i))
as.data.frame(lagxs)[-c(1:lag),-1]
}else{
x.t <- eval(expr = parse(text = paste("cl.test$",stock,sep = "")))
x <- rbind(tail(x,lag),x.t)
org.len<-length(x)
lagxs<-lapply(c(0,seq(lag)), function(i)lag(x,i))
as.data.frame(lagxs)[-c(1:lag),-1]
}
}
source('~/Box Sync/Course/479/SVM_KPCA_479/tune_svm_mixed.R', echo=TRUE)
source('~/Box Sync/Course/479/SVM_KPCA_479/tune_svm_mixed.R', echo=TRUE)
optim(c(0.2,1),tuneSVMR,lower = 0)
kernel="radial"
tuneSVMR<-function(x){
gamma<-x[1];cost<-x[2]
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx2(x,lag_num,insample)}
, lag_num=corlags,insample = TRUE)
lagX <- as.data.frame(lagX)
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD <- cbind(lagDD,head(lagX,dim(lagDD)[1]))##combine highly correlated stocks
m<-svm(DD~.,data =lagDD ,type="eps-regression"
,kernel=kernel,scale=FALSE
, cost=cost,gamma=gamma)
new <- predict(m, lagDD[,-1])
sum((new-lagDD[,1])^2)/length(new)
}
optim(c(0.2,1),tuneSVMR,lower = 0)
cost <- seq(0.1,5,by=0.1)
gamma <- seq(0.1,5,by=0.1)
parms <- expand.grid(cost = cost, gamma = gamma)
result <- foreach(i = 1:nrow(parms), .combine = rbind) %dopar% {
c <- parms[i, ]$cost
g <- parms[i, ]$gamma
mse<-tuneSVMR(c(g,c))
data.frame(parms[i, ], MSE = mse)
}
head(arrange(result,MSE))
source('~/Box Sync/Course/479/SVM_KPCA_479/tune_svm_mixed.R', echo=TRUE)
source("svmRegression_mixed.R")
source("svmRegression_mixed.R")
arrange(result,MSE)[1,]
optim(c(0.2,1),tuneSVMR,lower = 0)
print(arrange(result,MSE)[1:10,])
source("clean.R")
plot(cl$DD,type = "l",ylim = c(30,130), main= "the highly correlated stocks")
lines(cl$CAT, lty = 2)
lines(cl$DIS,lty=3)
lines(cl$DIS,lty=4)
lines(cl$TRV, lty=5)
lines(cl$TRV, lty=6)
plot(cl$DD,type = "l",ylim = c(30,130),
main= "the highly correlated stocks")
plot(cl$DD,lty=1,ylim = c(30,130),
main= "the highly correlated stocks")
lines(cl$CAT, lty = 2)
lines(cl$DIS,lty=4)
lines(cl$TRV, lty=6)
lines(cl$TRV, lty=7)
plot(cl$DD,lty=1,ylim = c(30,130),
main= "the highly correlated stocks")
lines(cl$CAT, lty = 2)
lines(cl$DIS,lty=4)
lines(cl$TRV, lty=7)
plot(cl$DD,lty=1,ylim = c(30,130),
main= "the highly correlated stocks")
lines(cl$CAT, lty = 2)
lines(cl$DIS,lty=4)
lines(cl$TRV, lty=3)
legend("upperleft",c("DD","CAT","DIS","TRV"),lty = c(1,2,3,4))
legend("topleft",c("DD","CAT","DIS","TRV"),lty = c(1,2,3,4))
legend("topleft",c("DD","CAT","DIS","TRV")
,lty = c(1,2,3,4)
,fill = "red")
legend("topleft",c("DD","CAT","DIS","TRV")
,lty = c(1,2,3,4)
,angle = 20)
plot(cl$DD,lty=1,ylim = c(30,130),
main= "the highly correlated stocks")
lines(cl$CAT, lty = 2)
lines(cl$DIS,lty=3)
lines(cl$TRV, lty=4)
legend("topleft",c("DD","CAT","DIS","TRV")
,lty = c(1,2,3,4)
,angle = 20)
legend("topleft",c("DD","CAT","DIS","TRV")
,lty = c(1,2,3,4)
,horiz = F)
### create lagged inputs  (lag() in quantmod)
plot(cl$DD,lty=1,ylim = c(30,130),
main= "the highly correlated stocks")
lines(cl$CAT, lty = 2)
lines(cl$DIS,lty=3)
lines(cl$TRV, lty=4)
legend("topleft",c("DD","CAT","DIS","TRV")
,lty = c(1,2,3,4)
,horiz = F)
plot(cl$DD,lty=1,ylim = c(30,130),
main= "the highly correlated stocks")
lines(cl$CAT, lty = 2)
lines(cl$DIS,lty=3)
lines(cl$TRV, lty=4)
legend("topleft",c("DD","CAT","DIS","TRV")
,lty = c(1,2,3,4)
,horiz = T)
plot(cl$DD,lty=1,ylim = c(30,130), lwd = 2
main= "the highly correlated stocks")
plot(cl$DD,lty=1,ylim = c(30,130), lwd = 2,
main= "the highly correlated stocks")
plot(cl$DD,lty=1,ylim = c(30,130), lwd = 1,
main= "the highly correlated stocks")
plot(cl$DD,lty=1,ylim = c(30,130),
main= "the highly correlated stocks")
lines(cl$CAT, lty = 2,lwd=3)
plot(cl$DD,lty=1,ylim = c(30,130),
main= "the highly correlated stocks")
lines(cl$CAT, lty = 2,lwd=2)
lines(cl$DIS,lty=3,lwd=2)
lines(cl$TRV, lty=4,lwd=2)
legend("topleft",c("DD","CAT","DIS","TRV")
,lty = c(1,2,3,4)
,horiz = T)
source("clean.R")
source("clean.R")
print(paste("the highly correlated stocks associated with DD are\r"
,paste(colnames(highcorr)[highcorr[which.max(rowSums(highcorr)),]]
,collapse =" ")))
source("clean.R")
source("clean.R")
highcorr<-(cor(cl)>0.9 & cor(cl)<1 )
(highcorr<-(cor(cl)>0.9 & cor(cl)<1 ))
which.max(rowSums(highcorr))
cor(cl)[8,]
which.max(rowSums(highcorr))
rownames(cor(cl))[8]
cor(cl)[8,highcorr[which.max(rowSums(highcorr)),]]
source("clean.R")
source("classification_auto.R")
autoSVMR(lag_num,"radial",insampletest = TRUE)
autoSVMR(lag_num,"radial",insampletest = FALSE)
source("classification_auto.R")
source("classification_mixed.R")
source("classification_mixed.R")
source("classification_auto.R")
source("classification_auto.R")
source("classification_mixed.R")
source("classification_auto.R")
source("classification_mixed.R")
source("classification_mixed.R")
source("classification_auto.R")
source("classification_auto.R")
mixRollSVMR(lag_num = 5,"radial",insampletest = FALSE,roll_num = 8,corlags=4)
mixRollSVMR(lag_num = 5,"radial",insampletest = FALSE,roll_num = 8,corlags=5)
mixRollSVMR(lag_num = 6,"radial",insampletest = FALSE,roll_num = 8,corlags=5)
mixRollSVMR(lag_num = 6,"radial",insampletest = FALSE,roll_num = 8,corlags=3)
mixRollSVMR(lag_num = 6,"radial",insampletest = FALSE,roll_num = 8,corlags=2)
mixRollSVMR(lag_num = 6,"radial",insampletest = FALSE,roll_num = 6,corlags=2)
mixRollSVMR(lag_num = 5,"radial",insampletest = FALSE,roll_num = 8,corlags=3)
mixRollSVMR(lag_num = 5,"radial",insampletest = FALSE,roll_num = 8,corlags=5)
source("classification_auto.R")
source("classification_mixed.R")
source("svmRegression_auto.R")
source("svmRegression_auto.R")
source("svmRegression_auto.R")
source("svmRegression_auto.R")
source("svmRegression_mixed.R")
source("svmRegression_mixed.R")
source("Gaussionkpca+svmR.R")
source("Gaussionkpca+svmR.R")
source("Gaussionkpca+svmR.R")
mixRollSVMR(lag_num = 5,"radial",insampletest = FALSE,roll_num = 5,corlags=4)
source("Gaussionkpca+svmR.R")
source('~/Box Sync/Course/479/SVM_KPCA_479/Gaussionkpca+svmR.R', echo=TRUE)
mixSVMR(lag_num,"radial",insampletest = FALSE,corlags=4)
source('~/Box Sync/Course/479/SVM_KPCA_479/svmRegression_mixed.R', echo=TRUE)
mixSVMR(lag_num,"radial",insampletest = FALSE,corlags=4)
mixSVMR(lag_num,"radial",insampletest = FALSE,corlags=4)
source('~/Box Sync/Course/479/SVM_KPCA_479/svmRegression_mixed.R', echo=TRUE)
mixSVMR(lag_num,"radial",insampletest = FALSE,corlags=4)
lag_num,"radial";insampletest = FALSE;corlags=4
lag_num=5;"radial";insampletest = FALSE;corlags=4
lag_num=5;kernel="radial";insampletest = FALSE;corlags=4
if(corlags <=lag_num) {
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx2(x,lag_num,insample)}
, lag_num=corlags,insample = TRUE)
lagX <- as.data.frame(lagX)
}else{
stop("larger corlags than lag_num")
}
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD <- cbind(lagDD,head(lagX,dim(lagDD)[1]))##combine highly correlated stocks
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
m<-svm(DD~.,data =lagDD ,type="eps-regression",kernel=kernel,scale=FALSE
,cost=0.7,gamma=1.1)
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx2(x,lag_num,insample)}
, lag_num=corlags,insample = FALSE)
lagX <- as.data.frame(lagX)
lagDD<-lagx("DD",lag_num,insample=FALSE)
lagDD <- cbind(lagDD,head(lagX,dim(lagDD)[1]))##combine highly correlated stocks
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
print(lagDD)
new <- predict(m,lagDD[,-1])
new
m
m<-svm(DD~.,data =lagDD ,type="eps-regression",kernel=kernel,scale=FALSE)
new <- predict(m,lagDD[,-1])
new
source('~/Box Sync/Course/479/SVM_KPCA_479/svmRegression_mixed.R', echo=TRUE)
mixSVMR(lag_num,"radial",insampletest = FALSE,corlags=4)
corlags
if(corlags <=lag_num) {
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx2(x,lag_num,insample)}
, lag_num=corlags,insample = TRUE)
lagX <- as.data.frame(lagX)
}else{
stop("larger corlags than lag_num")
}
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD <- cbind(lagDD,head(lagX,dim(lagDD)[1]))##combine highly correlated stocks
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
m<-svm(DD~.,data =lagDD ,type="eps-regression",kernel=kernel,scale=FALSE)
m
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx2(x,lag_num,insample)}
, lag_num=corlags,insample = FALSE)
lagX <- as.data.frame(lagX)
lagDD<-lagx("DD",lag_num,insample=FALSE)
lagDD <- cbind(lagDD,head(lagX,dim(lagDD)[1]))##combine highly correlated stocks
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
new <- predict(m,lagDD[,-1])
new
lagDD
m
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD <- cbind(lagDD,head(lagX,dim(lagDD)[1]))##combine highly correlated stocks
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
m<-svm(DD~.,data =lagDD ,type="eps-regression",kernel=kernel,scale=FALSE)
new <- predict(m, lagDD[,-1])
new <-.xts(new,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
plot(lagDD[,1],ylim=c(45,60),main="DD and in_sample estimate")
lines(new,type = "b")
lagDD
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx2(x,lag_num,insample)}
, lag_num=corlags,insample = FALSE)
lagX <- as.data.frame(lagX)
lagDD<-lagx("DD",lag_num,insample=FALSE)
lagDD <- cbind(lagDD,head(lagX,dim(lagDD)[1]))##combine highly correlated stocks
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
new <- predict(m,lagDD[,-1])
new
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx2(x,lag_num,insample)}
, lag_num=corlags,insample = FALSE)
lagX <- as.data.frame(lagX)
lagDD<-lagx("DD",lag_num,insample=FALSE)
lagDD <- cbind(lagDD,head(lagX,dim(lagDD)[1]))##combine highly correlated stocks
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
new <- predict(m,lagDD[,-1])
new <-.xts(new,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
new
lim<-c(min(c(as.vector(new),as.vector(lagDD[,1]))),max(c(as.vector(new),as.vector(lagDD[,1]))))
plot(lagDD[,1],main="DD and out_sample estimate",lty=1,ylim=lim)
lines(new,lty=2)
legend("topright",c("real","prediction"),lty=c(1,2))
print(paste(kernel,"static mixed-svm outsample","the MSE is",sum((new-lagDD[,1])^2)/length(new),sep=" "))
lag_num
insampletest
corlags
if(corlags <=lag_num) {
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx2(x,lag_num,insample)}
, lag_num=corlags,insample = TRUE)
lagX <- as.data.frame(lagX)
}else{
stop("larger corlags than lag_num")
}
lagDD<-lagx("DD",lag_num,insample = TRUE)
lagDD <- cbind(lagDD,head(lagX,dim(lagDD)[1]))##combine highly correlated stocks
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
m<-svm(DD~.,data =lagDD ,type="eps-regression",kernel=kernel,scale=FALSE)
m
new <- predict(m, lagDD[,-1])
new <-.xts(new,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
plot(lagDD[,1],ylim=c(45,60),main="DD and in_sample estimate")
lines(new,type = "b")
print(paste(kernel,"static mixed-svm insample","the MSE is",sum((new-lagDD[,1])^2)/length(new),sep=" "))
lagX<-lapply(HighCor, function(x,lag_num,insample) {lagx2(x,lag_num,insample)}
, lag_num=corlags,insample = FALSE)
lagX <- as.data.frame(lagX)
lagDD<-lagx("DD",lag_num,insample=FALSE)
lagDD <- cbind(lagDD,head(lagX,dim(lagDD)[1]))##combine highly correlated stocks
lagDD<-.xts(x = lagDD,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
new <- predict(m,lagDD[,-1])
new <-.xts(new,index = as.Date(rownames(lagDD),format="%Y-%m-%d"))
lim<-c(min(c(as.vector(new),as.vector(lagDD[,1]))),max(c(as.vector(new),as.vector(lagDD[,1]))))
plot(lagDD[,1],main="DD and out_sample estimate",lty=1,ylim=lim)
lines(new,lty=2)
new
legend("topright",c("real","prediction"),lty=c(1,2))
print(paste(kernel,"static mixed-svm outsample","the MSE is",sum((new-lagDD[,1])^2)/length(new),sep=" "))
}
return(new)
}
source('~/Box Sync/Course/479/SVM_KPCA_479/svmRegression_mixed.R', echo=TRUE)
source('~/Box Sync/Course/479/SVM_KPCA_479/Gaussionkpca+svmR.R', echo=TRUE)
source('~/Box Sync/Course/479/SVM_KPCA_479/Gaussionkpca+svmR.R', echo=TRUE)
source('~/Box Sync/Course/479/SVM_KPCA_479/Gaussionkpca+svmR.R', echo=TRUE)
source('~/Box Sync/Course/479/SVM_KPCA_479/svmRegression_mixed.R', echo=TRUE)
source('~/Box Sync/Course/479/SVM_KPCA_479/clean2.R', echo=TRUE)
